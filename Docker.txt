#########DOCKER LINUX TIPS################

##########Day 1##############

Container é um tipo de abstração de máquina que, apesar dos processos rodando nele serem visíveis ao sistema operacional, não são visíveis a outros containers.
	Isolamento lógico: é o falado anteriormente. Os containers não tem acesso aos arquivos e recursos de instância definidos nos outros, estão isolados 
também por rede de usuarios e processos. Responsável por tal são os namespaces
	Isolamento físico: é a alocação de recursosa um determinados containers tais como CPU, I/O, Disco e memória. Responsável são os 
Se 10 containers tem a mesma imagem originária, a imagem utilizada é a mesma. Porém há uma cada de abstração acima onde os containers vão variar um do outros
No container não há sistema operacional completo, apenad módulos
	Netfilter: programa o qual se interage com o Netfilter. Todos os redirecionamentos de pacotes, de rede, etc. são feitos pelo iptables/Netfilter. 
	Namespaces: Módulo do kernel Linux que é o responsável pelo isolamento de processos. Exemplos de namespace são namespace user, namespace processo, namespace net, etc. 
Todos módulos do kernel do linux sem necessidade de compilá-lo.
	cgroup: Utilizado para distribuir a carga de recursos por aplicações. Aloca memoria, processamento, etc.
	
Instalando o Docker:
	curl -fsSL https://get.docker.com | bash  // Script que vai identificar qual seu sistema operacional, adicionar o endereço de repositório do docker pra o Ubunto e vai fazer o apt-get install do repo correto para sua distribuição de SO.
Docker Client: Quem recebe as instruções
Docker Server: Responsável pela orquestração

docker version // Verifica a versão do docker instalado
docker container ls // Lista os containers
docker ps // também lista os containers

docker container run -ti hello-world // executa o container hello world que é ideal para conhecer instâncias básicas de containers. Ele roda, exibe a mensagem e morre.

docker container create // Cria o container mas não o executa

docker container run -ti ubuntu // baixa distribuição do ubuntu e reencaminha usuario para dentro do container

docker container inspect 
	Um dos comandos mais importantes do Docker, inspect vai mostrar pra você tudo que está ligado aquele container. Sempre que você quiser saber quais associações e
o que um container usa ou tem como base o docker container inspect vai mostrar pra você

Saindo de containers:
	exit // dentro do container, utilizando essa metodologia de entrar diretamente no container assim que o mesmo é iniciado, caso execute 
esse comando você finaliza a instância. Porque você estaria dando exit na instância principal do bash do Ubunto. O qual, está subentendido 
pelo docker como processo principal desse container.

	ctrl+p+q // Atalho para sair do container sem que aconteça a mesma situação de exit

	Note que isso só vale para Containers os quais você entra diretamente no terminal. No exemplo do curso, por exemplo, se entrarmos no container através
do docker exec -it [nome_do_container] bash , criamos outra execução do terminal. Nesse caso, se você usar exit, você não matará o container. Isso foi
testado e verificado durante a prática do curso

Entrando no container:

	docker container run -ti ubuntu // baixa distribuição do ubuntu e reencaminha usuario para dentro do container
	docker container attach [CONTAINER_ID] // Entra no container no processo principal. Ou seja, se você sair com exit você vai matar o Container
	docker exec -it [CONTAINER_ID] bash// Abre uma nova instância do Bash. Portanto, quando você executar exit, você mata o bash que você criou e não o inicial

docker container run -it nginx // Exemplo de como baixar um container com serviço como principal. O indicado é não usar -it. Pois se você
usar ele o processo do Ngnix, que é o principal, vai rodar em primeiro plano.

docker container run -d nginx // desa forma, o container do ngnix vai rodar em segundo plano

docker container start // inicia um container
docker container stop // para um container
docker container restart// reinicia um container 
docker container pause // Pausa os serviços do container
docker container unpause // Desfaz pause

docker container logs -f // equivalente a um tail -f no log do container

docker container rm // remove container que não está em execução
docker container rm -f // remove container de maneira forçada. Inclusive se estiver em execução

docker contatiner stats // mostra as estatísticas de uso de recursos do container
docker container top // análogo ao top do linux

docker container run -d -m 128M nginx // Limita o uso de memória do container a 128 M, poderia ter sido usado --memory como análogo

docker container update // atualiza recursos que o container pode utilizar

Parâmetros de comandos de criação ou execução de containers
	-d // dettach. Roda em background
	-m ou --memory // limita o uso de memória ao container
	--cpus // Valor relativo aos cores de cpu que a maquina pode usar. valores inteiros, como 1 ou 2 , dão capacidade ao container de usar 
1 ou dois cores. Enquanto valores decimais se referem a percentagem de um core que pode ser utilizado
	-ti// container tem que ter um terminal e quando o container, acessaremos o mesmo
	-p // Relativo a port. binda na porta do container e do host separados por dois pontos, ex: -p 80:8080. Notar que não se pode bindar mais de uma porta ao mesmo tempo
	-P // Também relativo a port. Mas espera que uma porta seja consultada e redireciona ela a uma porta aleatória ao invés de uma pré-determinada
	-v // Relativo a volume. Define o volume com origem e destino
	--volumes-from // puxa os volumes de outro container
	-e // Relativo a environment. Passa uma variavel de ambiente como parâmetro
	--no-cache // Não utiliza o Cache local para montar a imagem e baixa todos os arquivos atualizados

Exemplo básico de Dockerfile

	FROM debian

	LABEL app="Giropops"
	ENV MAUMAS="Obeso"

	RUN apt-get update && apt-get install -y stress && apt-get clean

	CMD stress --cpu 1 --vm-bytes 64M --vm 1

Dissecando exemplo básico de docker file
	FROM debian 
	// Origem ou nome da imagem que será usada de base para o container
	LABEL app="Giropops" 
	// Label é um identificador o qual será possível ser consultado quando você usar o inspect para ver as características do container
	ENV MAUMAS="Obeso" // É uma variável de ambiente. Uma consulta por exemplo via terminal as variaveis de ambiente com o o nome MAUMAS retornará o valor Obeso normalmente
	RUN apt-get update && apt-get install -y stress && apt-get clean 
	// Como explicado no inicio do curso. Os comandos run ficam na primeira camada de abstração. São comandos executados durante a criação do container.
Cada RUN é uma camada de abstração então é por isso que só tem um RUN e não vários. Todas as camadas são Readonly e não se comunicam.
Ou seja, esse container tem como caracterísitica principal o que está no RUN que é instalar o aplicativo de estressar a máquina e atualizar os pacotes
	CMD stress --cpu 1 --vm-bytes 64M --vm 1 // CMD sendo acronimo pra command (comando), utiliza a interface disponibilizada para executar um comando. Nesse caso,
o comando é estressar a maquina utilizando 100% da CPU 1 e 64 MB de memoria RAM
	
Buildando Dockerfile em imagem:

	docker image build -t [NOME DA IMAGEM] [CAMINHO DO DOCKERFILE]  //Constrói a Imagem que servirá de base para o container
	
	docker container run -d [NOME DA IMAGEM] // diferente do Ubuntu, ngnix e centos que testamos anteriormente, a imagem será achada localmente e o container vai subir
	
###############################Day 2#######################################################
	

docker container run -it --mount type=bind,src=/opt/giropops,dst=/giropops debian
	//Comando para montar uma imagem debian ligando uma imagem dentro do Container a um destino do sistema operacional
	dst // relativo a onte ficará alocada dentro do container a imagem que será compartilhada com o SO
	src // relativo a onde ficará no SO os arquivos salvos no container. Ou seja, se dentro do container você
escrever algo no volume /giropops logo você terá esses arquivos disponíveis no Sistema operacional local em /opt/giropops

docker container run -it --mount type=bind,src=/opt/giropops,dst=/giropops,ro debian
	// Usa volumes do tipo bind da mesma forma que anteriormente porém read only. Ou seja. O container não pode alterar os arquivos que já estão
no SO. Ou seja, é útil quando você quer que uma aplicação acesse dados, por exemplo, de outra aplicação mas você não quer que por um erro de dev
ou de rotinas programadas alterar aqueles arquivos. Usando ro, você tem um isolamento maior

docker volume ls // Lista volumes disponíveis

docker volume create giropops // cria um volume chamado giropops
	//Todos os volumes no Docker são salvos em /var/lib/docker/volumes
	//No nosso exemplo giropops, todos os arquivos em /var/lib/docker/volumes/giropops/_data/ estarão disponíveis aos containers que tiverem acesso ao volume

docker container run -it --mount type=volume,src=giropops,dst=/giropops debian
	//Agora utilizando volumes docker, nós selecionamos o tipo volume e o nome do volume que definimos como giropos

docker volume inspect giropops // Inspect para volumes

docker volume rm giropops // Para remover um volume você tem que excluir todos os containers que usam o volume. Mesmo que esteja parado

docker volume prune // Apaga todos os volumes que não estão sendo usados por containers. Tem que se tomar muito cuidado porque podem haver dados sensíveis que podem ser perdidos.

docker container prune // Apaga todos os containers que não estão em uso.

docker container create -v /data --name dbdados centos
	//Cria um container com um volume associado no diretorio do host a esquerda e do container a direita (ex: /opt/giropops:/giropops)
	// O exemplo usa a pasta /data, que será usado pelo banco de dados
	// Como não foi colocado nada a esquerda ele é salvo automaticamente em /var/lib/docker/volumes
	// Para saber o caminho absoluto, use o inspect na seção Mount
	
docker run -d -p 5432:5432 --name pgsql1 --volumes-from dbdados -e POSTGRESQL_USER=docker -e POSTGRESQL_PASS=docker -e POSTGRESQL_DB=docker kamui/postgresql
	//Exemplo de configuração válida para subir um banco postgresql
	//Notar que não se pode bindar mais de  uma porta ao mesmo tempo 

docker run -d -p 5432:5432 --name pgsql1 --mount type=volume,src=dados_locais,dst=/data -e POSTGRESQL_USER=docker -e POSTGRESQL_PASS=docker -e POSTGRESQL_DB=docker kamui/postgresql
	// Agora criando o mesmo serviço usando um volume local criado chamado dados_locais
	

BACKUP

	docker container run -it --mount type=volume,src=[VOLUME_LOCAL_PARA_BACKUP], dst=[VOLUME_NO_CONTAINER_PARA_BACKUP] --mount type=bind,src=[DIRETORIO_DE_BACKUP_LOCAL],dst=/backup tar -cvf /backup/[NOME_DO_SERVIÇO_QUE_ESTAMOS_FAZENDO_BACKUP].tar [DIRETORIO_OU_ARQUIVO_QUE_ESTAMOS_FAZENDO_BACKUP]
	//Montamos duas imagens para não alterarmos a imagem em produção que no caso é [VOLUME_LOCAL_PARA_BACKUP]
	//Utilizando apenas comandos linux, compactamos em um arquivo tar as informações do volume e salvamos no diretorio de backup que criamos.
	
	docker run -ti --volumes-from dbdados -v $(pwd):/backup debian tar -cvf /backup/backup.tar /data
	//equivalente. Fará o backup no diretorio local de volumes, na pasta backup

É importante que você crie a sua imagem e não a de terceiros por causa das vulnerabilidades existentes em imagens.
Recomenda-se o Alpine porque é uma distribuição pequena onde você pode ter controle e instalar o que precisar

Não é possível usar tipo bind em Dockerfile

FROM debian
RUN apt-get update && apt-get install -y apache2 && apt-get clean
ENV APACHE_LOCK_DIR="/var/lock"
ENV APACHE_PID_FILE="/var/run/apache2.pid"
ENV APACHE_RUN_USER="www-data"
ENV APACHE_RUN_GROUP="www-data"
ENV APACHE_LOG_DIR="/var/log/apache2"

LABEL description="Webserver"
LABEL version="1.0.0"

VOLUME /var/www/html
EXPOSE 80

ENTRYPOINT ["/usr/sbin/apachectl"]
CMD ["-D", "FOREGROUND"]

//Expose se refere que o container espera comunicação na porta 80. O redirecionamento, porém é feita de maneira aleatória. Equivalente ao -P
//Entrepoint diz que o comando é o principal processo do container. No caso, o principal é o Apache
//CMD executa um comando no Shell/Bash. Nesse caso, ele está interagindo com o Apache e colocando ele em primeiro plano

CMD["parametros", "comandos"] // Sintaxe exec. Se utiliza de listas para executar os parâmetros. Faz a mesma coisa que a sintaxe modo shell,mas só ele pode ser utilizado junto a ENTRYPOINT
CMD comando --parametros // Executa o comando igual ao shell/bash. Sintaxe é conhecida como Shell. Não pode ser executado em um arquivo que contenha ENTRYPOINT.


sudo docker image build -t [NOME DA IMAGEGEM] [CAMINHO DO DOCKERFILE]


Adicionando a seguinte linha no Dockerfile:

	COPY index.html /var/www/html/

	//Copia um arquivo local pra dentro do apache2
	//Copia um arquivo no Caminho local para o caminho dentro do container


Alternativa ao copy:

	ADD index.html /var/www/html/

	//Consegue fazer downloads 
	//Descompacta arquivos Tar
	// Faz o mesmo que o COPY

Adicionando USER:
	
	USER www-data
	
	//utiliza o usuário indicado e não o usuario root como padrão
	//Necessita que você dê permissão ao usuario para acessar e modificar os diretorios utilizados pelo Apache

Adicionando WORKDIR:

	WORKDIR /var/www/htlm/

	//Toma o diretório setado como diretório de trabalho inicial
	// Ao acessar o container, é direcionado diretamente a ele
	
	Exemplo, ao utilizar o Apache, é necessario acesso a uma ou mais pasta em /var/lock, /var/www e /var/log
		RUN chown www-data:www-data /var/lock && chown www-data:www-data /var/www && chown www-data:www-data /var/log
		
Criando container/Dockerfile rodando aplicação direto (Container/Dockerfile para rodar uma aplicação em uma linguagem):

	FROM golang

	WORKDIR /app

	ADD . /app

	RUN go build -o meugo

	ENTRYPOINT ./meugo

Conceito de multistage aplicado abaixo

Usando a distribuição Alpine (mais leve que outras) pra rodar a aplicação GO

	FROM golang

	WORKDIR /giropops

	ADD . /app

	FROM alpine
	WORKDIR /app
	COPY --from=buildando /app/meugo /giropops/
	
	ENTRYPOINT ./meugo
===============================================================
FROM golang AS buildando

ADD . /src
WORKDIR /src
RUN go build -o goapp


FROM alpine:3.1

WORKDIR /app
COPY --from=buildando /src/goapp /app
ENTRYPOINT ./goapp

===============================================================
CONCEITOS
	- Camadas: Camadas de abstração e onde você realmente consegue escrever
	- Multiline: Para não criar varias camadas, podes quebrar uma camada em várias em linhas (um RUN em varias linhas)
	- .dockerignore // Similar ao git ignore. Esses arquivos listados aqui serão ignorados
	- ENTRYPOINT é o principal processo em uma maquina
	- ENTRYPOINT e CMD no mesmo docker file obriga a utilização do modo exec
	- SCRIPT DE START não é elegante. 
	- Você consegue usar variaveis de ambiente criadas no Dockerfile dentro do proprio
	- ADD Consegue fazer downloads, descompacta arquivos Tar e faz o mesmo que o COPY
	- ARG exige um argumento ou possibilita existencia de argumento no build
	- HEALTHCHECK Executa uma rotina que condiciona o funcionamento do container

=================================================================
	ADD => Copia novos arquivos, diretórios, arquivos TAR ou arquivos remotos e os adicionam ao filesystem do container;

	CMD => Executa um comando, diferente do RUN que executa o comando no momento em que está "buildando" a imagem, o CMD executa no início da execução do container;

	LABEL => Adiciona metadados a imagem como versão, descrição e fabricante;

	COPY => Copia novos arquivos e diretórios e os adicionam ao filesystem do container;

	ENTRYPOINT => Permite você configurar um container para rodar um executável, e quando esse executável for finalizado, o container também será;

	ENV => Informa variáveis de ambiente ao container;

	EXPOSE => Informa qual porta o container estará ouvindo;

	FROM => Indica qual imagem será utilizada como base, ela precisa ser a primeira linha do Dockerfile;

	MAINTAINER => Autor da imagem; 

	RUN => Executa qualquer comando em uma nova camada no topo da imagem e "commita" as alterações. Essas alterações você poderá utilizar nas próximas instruções de seu Dockerfile;

	USER => Determina qual o usuário será utilizado na imagem. Por default é o root;

	VOLUME => Permite a criação de um ponto de montagem no container;

	WORKDIR => Responsável por mudar do diretório / (raiz) para o especificado nele

=================================================================	
	
	

docker container rm -f $(docker ps -q) // força apagar todos os containers
ddocker image rm -f $(docker image ls -q) // força apagar todas as imagens


docker commit -m "NOME_DA_IMAGEM" ID_DO_CONTAINER // transforma a instância do container atual em imagem

Tageando uma imagem

	docker image tag 281f58e95b0a maudantas/meuapache:5.0

Mandando pra o dockerhub 
	docker login 
	docker push maudantas/meuapache:5.0
	
docker registry é um repositório de imagens docker. Se você usar um IP, ele enviará oara o registry ao invés do docker hub

docker container run -d -p 5000:5000 --restart=always --name registry registry:2

########################################################################
#######################################Day 3############################
########################################################################

Para fazer a instalação do Docker Machine no Linux, faça:

# curl -L https://github.com/docker/machine/releases/download/v0.16.1
/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine
# chmod +x /tmp/docker-machine 
# sudo cp /tmp/docker-machine /usr/local/bin/docker-machine


Para seguir com a instalação no macOS:

# curl -L https://github.com/docker/machine/releases/download/v0.16.1
/docker-machine-`uname -s`-`uname -m` >/usr/local/bin/docker-machine 
# chmod +x /usr/local/bin/docker-machine

Para seguir com a instalação no Windows caso esteja usando o Git bash:

# if [[ ! -d "$HOME/bin" ]]; then mkdir -p "$HOME/bin"; fi
# curl -L https://github.com/docker/machine/releases/download/v0.16.1
/docker-machine-Windows-x86_64.exe > "$HOME/bin/docker-machine.exe"
# chmod +x "$HOME/bin/docker-machine.exe"


Para verificar se ele foi instalado e qual a sua versão, faça:

# docker-machine version

# docker-machine create --driver virtualbox linuxtips

# docker-machine ls

# docker-machine env linuxtips

# eval "$(docker-machine env linuxtips)"

# docker container ls

# docker container run busybox echo "LINUXTIPS, VAIIII"

# docker-machine ip linuxtips

# docker-machine ssh linuxtips

# docker-machine inspect linuxtips

# docker-machine stop linuxtips

# docker-machine ls 

# docker-machine start linuxtips

# docker-machine rm linuxtips

# eval $(docker-machine env -u)

DOCKER SWARM

Conceitos
	Docker Manager // É quem sabe onde estão todos os containers e microserviços
		Pra o Cluster swarm estar ativo e funcionando eu preciso ter pelo menos 51% dos meus Cluster Manager funcionando

	Docker Worker // Quem executa de fato as tarefas


docker swarm init // inicia o cluster

docker-swarm join-token (manager) // gera o token para adicionar um node ao cluster

docker node rm  // Remove um node. Caso seja um manager, tem que ser demovido a worker antes de ser excluído

docker-swarm join-token --rotate manager // troca o manager do cluster

docker node update --availability pause NODENAME // Node não recebe novos containers

docker node update --availability active NODENAME // Node volta a receber containers

docker node update --availability drain NODENAME // Node desativa os containers atuais e não recebe novos containers

Services // Serve para escalar uma aplicação a vários containers. Ou seja, que um conjunto de containers atuem com um propósito.

docker service create --name webserver --replicas 3 -p 8080:80 nginx // Cria três containers com serviços Nginx distribuídos entre os clusters (não sobrecarrega os nodes)

docker service rm // remove o serviço

	--network-add // adiciciona uma rede a um serviço
	--publish-add // adiciona uma porta a um serviço
	

# docker swarm init

# docker swarm join --token \ SWMTKN-1-100_SEU_TOKEN SEU_IP_MASTER:2377

# docker node ls

# docker swarm join-token manager

# docker swarm join-token worker

# docker node inspect LINUXtips-02

# docker node promote LINUXtips-03

# docker node ls

# docker node demote LINUXtips-03

# docker swarm leave

# docker swarm leave --force

# docker node rm LINUXtips-03

# docker service create --name webserver --replicas 5 -p 8080:80  nginx

# curl QUALQUER_IP_NODES_CLUSTER:8080

# docker service ls

# docker service ps webserver

# docker service inspect webserver

# docker service logs -f webserver

# docker service rm webserver

# docker service create --name webserver --replicas 5 -p 8080:80 --mount type=volume,src=teste,dst=/app  nginx

# docker network create -d overlay giropops

// quando for criar uma rede overlay, a razão será para que os serviços consigam conversar entre si através dos nomes (DNS) dos containers

# docker network ls

# docker network inspect giropops

# docker service scale giropops=5

# docker network rm giropops

# docker service create --name webserver --network giropops --replicas 5 -p 8080:80 --mount type=volume,src=teste,dst=/app  nginx

# docker service update <OPCOES> <Nome_Service> 

Secret //Em um cluster Swarm, sempre que você precisar mandar um dado mais sensível para um container que não deveria ficar no compose ou dockerfile.
	- O secret é um arquivo
	- Se você quiser uma variável de ambiente terá que manipular esse arquivo
	- O kubernetes consegue criar diretamente essa variável de ambiente

echo 'minha secret' | docker secret create 
docker secret create minha_secret minha_secret.txt
docker secret inspect minha_secret
docker secret ls
docker secret rm minha_secret
docker service create --name app --detach=false --secret db_pass  minha_app:1.0
docker service create --detach=false --name app --secret source=db_pass,target=password,uid=2000,gid=3000,mode=0400 minha_app:1.0
ls -lhart /run/secrets/
docker service update --secret-rm db_pass --detach=false --secret-add source=db_pass_1,target=password app

DOCKER Compose

version // Versão
services// respectivo aos serviços rodando naquele compose
	image // imagem do serviços
	deploy 
		replicas // quantidade de containers rodando serviços
		resources // recursos destinados aos containers
			limits // limite máximo de recursos
				cpus // Em percentagem, quantidade de recurso alocado para cada container
				memory // Em valor absoluto, quantidade de memoria alocada para cada container
			restart_policy // Há containers que são persistentes e ficam sempre tentando reiniciar. Aqui é especificada essa opção
		ports // Redirecionamento de porta do container para os hosts
		networks // rede virtual a qual o container está inserido

Primeiro Compose:



docker stack deploy -c docker-compose.yml giropops // Para subir o compose


